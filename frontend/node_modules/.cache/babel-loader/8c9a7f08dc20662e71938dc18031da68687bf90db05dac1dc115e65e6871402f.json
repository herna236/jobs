{"ast":null,"code":"import axios from\"axios\";const BASE_URL=process.env.REACT_APP_BASE_URL||\"http://localhost:3001\";/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */class JoblyApi{// the token for interactive with the API will be stored here.\nstatic async request(endpoint){let data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let method=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"get\";console.debug(\"API Call:\",endpoint,data,method);const url=`${BASE_URL}/${endpoint}`;const headers={Authorization:`Bearer ${JoblyApi.token}`};const params=method===\"get\"?data:{};try{return(await axios({url,method,data,params,headers})).data;}catch(err){console.error(\"API Error:\",err.response);let message=err.response.data.error.message;throw Array.isArray(message)?message:[message];}}// Individual API routes\n/** Get the current user. */static async getCurrentUser(username){let res=await this.request(`users/${username}`);return res.user;}/** Get companies (filtered by name if not undefined) */static async getCompanies(name){let res=await this.request(\"companies\",{name});return res.companies;}/** Get details on a company by handle. */static async getCompany(handle){let res=await this.request(`companies/${handle}`);return res.company;}/** Get list of jobs (filtered by title if not undefined) */static async getJobs(title){let res=await this.request(\"jobs\",{title});return res.jobs;}/** Apply to a job */static async applyToJob(username,id){await this.request(`users/${username}/jobs/${id}`,{},\"post\");}/** Get token for login from username, password. */static async login(data){let res=await this.request(`auth/token`,data,\"post\");return res.token;}/** Signup for site. */static async signup(data){let res=await this.request(`auth/register`,data,\"post\");return res.token;}/** Save user profile page. */static async saveProfile(username,data){let res=await this.request(`users/${username}`,data,\"patch\");return res.user;}}export default JoblyApi;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","endpoint","data","arguments","length","undefined","method","console","debug","url","headers","Authorization","token","params","err","error","response","message","Array","isArray","getCurrentUser","username","res","user","getCompanies","name","companies","getCompany","handle","company","getJobs","title","jobs","applyToJob","id","login","signup","saveProfile"],"sources":["/Users/veronica/Desktop/react-jobly-1/frontend/src/api/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = (method === \"get\")\n        ? data\n        : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get the current user. */\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Get companies (filtered by name if not undefined) */\n\n  static async getCompanies(name) {\n    let res = await this.request(\"companies\", { name });\n    return res.companies;\n  }\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get list of jobs (filtered by title if not undefined) */\n\n  static async getJobs(title) {\n    let res = await this.request(\"jobs\", { title });\n    return res.jobs;\n  }\n\n  /** Apply to a job */\n\n  static async applyToJob(username, id) {\n    await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n  }\n\n  /** Get token for login from username, password. */\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  /** Signup for site. */\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  /** Save user profile page. */\n\n  static async saveProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n}\n\n\nexport default JoblyApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}