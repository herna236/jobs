{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{BrowserRouter}from\"react-router-dom\";import useLocalStorage from\"./hooks/useLocalStorage\";import Navigation from\"./routes-nav/Navigation\";import Routes from\"./routes-nav/Routes\";import LoadingSpinner from\"./common/LoadingSpinner\";import JoblyApi from\"./api/api\";import UserContext from\"./auth/UserContext\";import jwt from\"jsonwebtoken\";// Key name for storing token in localStorage for \"remember me\" re-login\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const TOKEN_STORAGE_ID=\"jobly-token\";/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */function App(){const[infoLoaded,setInfoLoaded]=useState(false);const[applicationIds,setApplicationIds]=useState(new Set([]));const[currentUser,setCurrentUser]=useState(null);const[token,setToken]=useLocalStorage(TOKEN_STORAGE_ID);console.debug(\"App\",\"infoLoaded=\",infoLoaded,\"currentUser=\",currentUser,\"token=\",token);// Load user info from API. Until a user is logged in and they have a token,\n// this should not run. It only needs to re-run when a user logs out, so\n// the value of the token is a dependency for this effect.\nuseEffect(function loadUserInfo(){console.debug(\"App useEffect loadUserInfo\",\"token=\",token);async function getCurrentUser(){if(token){try{let{username}=jwt.decode(token);// put the token on the Api class so it can use it to call the API.\nJoblyApi.token=token;let currentUser=await JoblyApi.getCurrentUser(username);setCurrentUser(currentUser);setApplicationIds(new Set(currentUser.applications));}catch(err){console.error(\"App loadUserInfo: problem loading\",err);setCurrentUser(null);}}setInfoLoaded(true);}// set infoLoaded to false while async getCurrentUser runs; once the\n// data is fetched (or even if an error happens!), this will be set back\n// to false to control the spinner.\nsetInfoLoaded(false);getCurrentUser();},[token]);/** Handles site-wide logout. */function logout(){setCurrentUser(null);setToken(null);}/** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */async function signup(signupData){try{let token=await JoblyApi.signup(signupData);setToken(token);return{success:true};}catch(errors){console.error(\"signup failed\",errors);return{success:false,errors};}}/** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */async function login(loginData){try{let token=await JoblyApi.login(loginData);setToken(token);return{success:true};}catch(errors){console.error(\"login failed\",errors);return{success:false,errors};}}/** Checks if a job has been applied for. */function hasAppliedToJob(id){return applicationIds.has(id);}/** Apply to a job: make API call and update set of application IDs. */function applyToJob(id){if(hasAppliedToJob(id))return;JoblyApi.applyToJob(currentUser.username,id);setApplicationIds(new Set([...applicationIds,id]));}if(!infoLoaded)return/*#__PURE__*/_jsx(LoadingSpinner,{});return/*#__PURE__*/_jsx(BrowserRouter,{children:/*#__PURE__*/_jsx(UserContext.Provider,{value:{currentUser,setCurrentUser,hasAppliedToJob,applyToJob},children:/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(Navigation,{logout:logout}),/*#__PURE__*/_jsx(Routes,{login:login,signup:signup})]})})});}export default App;","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","useLocalStorage","Navigation","Routes","LoadingSpinner","JoblyApi","UserContext","jwt","jsx","_jsx","jsxs","_jsxs","TOKEN_STORAGE_ID","App","infoLoaded","setInfoLoaded","applicationIds","setApplicationIds","Set","currentUser","setCurrentUser","token","setToken","console","debug","loadUserInfo","getCurrentUser","username","decode","applications","err","error","logout","signup","signupData","success","errors","login","loginData","hasAppliedToJob","id","has","applyToJob","children","Provider","value","className"],"sources":["/Users/veronica/Desktop/react-jobly-1/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./routes-nav/Navigation\";\nimport Routes from \"./routes-nav/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport JoblyApi from \"./api/api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  console.debug(\n      \"App\",\n      \"infoLoaded=\", infoLoaded,\n      \"currentUser=\", currentUser,\n      \"token=\", token,\n  );\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Checks if a job has been applied for. */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /** Apply to a job: make API call and update set of application IDs. */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n      <BrowserRouter>\n        <UserContext.Provider\n            value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}>\n          <div className=\"App\">\n            <Navigation logout={logout} />\n            <Routes login={login} signup={signup} />\n          </div>\n        </UserContext.Provider>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}