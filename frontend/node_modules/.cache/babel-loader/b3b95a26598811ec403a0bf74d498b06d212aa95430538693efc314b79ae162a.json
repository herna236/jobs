{"ast":null,"code":"import{useRef,useState,useEffect}from\"react\";/** Custom hook for managing \"flash\" messages.\n *\n * This adds an item in state, `active`, which can be controlled by the\n * component as desired. The component would typically `setActive(true)`\n * to start displaying the message, and after `timeInMsec`, active would\n * go back to false, which would typically stop showing the message.\n *\n * In the component::\n *\n *   const [myMsgFlag, setMyMsgFlag] = useTimedMessage();\n *\n *   function somethingDidntWork() {\n *     setMsgFlag(true);\n *   }\n *\n *   return (\n *     {myMsgFlag ? <p>Oh No!</p> : null}\n *   )\n *\n * While this hook was written for showing flash messages, it's really just\n * a hook for timed state clearing -- this same pattern could be useful for\n * other tasks.\n *\n */function useTimedMessage(){let timeInMsec=arguments.length>0&&arguments[0]!==undefined?arguments[0]:3000;const[active,setActive]=useState(false);const messageShownRef=useRef(false);useEffect(function showSavedMessage(){console.debug(\"useTimedMessage useEffect showSavedMessage\",\"active=\",active);if(active&&!messageShownRef.current){messageShownRef.current=true;setTimeout(function removeMessage(){setActive(false);messageShownRef.current=false;},timeInMsec);}},[active,timeInMsec]);return[active,setActive];}export default useTimedMessage;","map":{"version":3,"names":["useRef","useState","useEffect","useTimedMessage","timeInMsec","arguments","length","undefined","active","setActive","messageShownRef","showSavedMessage","console","debug","current","setTimeout","removeMessage"],"sources":["/Users/veronica/Desktop/react-jobly-1/frontend/src/hooks/useTimedMessage.js"],"sourcesContent":["import { useRef, useState, useEffect } from \"react\";\n\n/** Custom hook for managing \"flash\" messages.\n *\n * This adds an item in state, `active`, which can be controlled by the\n * component as desired. The component would typically `setActive(true)`\n * to start displaying the message, and after `timeInMsec`, active would\n * go back to false, which would typically stop showing the message.\n *\n * In the component::\n *\n *   const [myMsgFlag, setMyMsgFlag] = useTimedMessage();\n *\n *   function somethingDidntWork() {\n *     setMsgFlag(true);\n *   }\n *\n *   return (\n *     {myMsgFlag ? <p>Oh No!</p> : null}\n *   )\n *\n * While this hook was written for showing flash messages, it's really just\n * a hook for timed state clearing -- this same pattern could be useful for\n * other tasks.\n *\n */\n\nfunction useTimedMessage(timeInMsec = 3000) {\n  const [active, setActive] = useState(false);\n\n  const messageShownRef = useRef(false);\n\n  useEffect(\n      function showSavedMessage() {\n        console.debug(\n            \"useTimedMessage useEffect showSavedMessage\", \"active=\", active);\n\n        if (active && !messageShownRef.current) {\n          messageShownRef.current = true;\n          setTimeout(function removeMessage() {\n            setActive(false);\n            messageShownRef.current = false;\n          }, timeInMsec);\n        }\n      },\n      [active, timeInMsec],\n  );\n\n  return [active, setActive];\n}\n\nexport default useTimedMessage;\n"],"mappings":"AAAA,OAASA,MAAM,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,QAAS,CAAAC,eAAeA,CAAA,CAAoB,IAAnB,CAAAC,UAAU,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACxC,KAAM,CAACG,MAAM,CAAEC,SAAS,CAAC,CAAGR,QAAQ,CAAC,KAAK,CAAC,CAE3C,KAAM,CAAAS,eAAe,CAAGV,MAAM,CAAC,KAAK,CAAC,CAErCE,SAAS,CACL,QAAS,CAAAS,gBAAgBA,CAAA,CAAG,CAC1BC,OAAO,CAACC,KAAK,CACT,4CAA4C,CAAE,SAAS,CAAEL,MAAM,CAAC,CAEpE,GAAIA,MAAM,EAAI,CAACE,eAAe,CAACI,OAAO,CAAE,CACtCJ,eAAe,CAACI,OAAO,CAAG,IAAI,CAC9BC,UAAU,CAAC,QAAS,CAAAC,aAAaA,CAAA,CAAG,CAClCP,SAAS,CAAC,KAAK,CAAC,CAChBC,eAAe,CAACI,OAAO,CAAG,KAAK,CACjC,CAAC,CAAEV,UAAU,CAAC,CAChB,CACF,CAAC,CACD,CAACI,MAAM,CAAEJ,UAAU,CACvB,CAAC,CAED,MAAO,CAACI,MAAM,CAAEC,SAAS,CAAC,CAC5B,CAEA,cAAe,CAAAN,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}